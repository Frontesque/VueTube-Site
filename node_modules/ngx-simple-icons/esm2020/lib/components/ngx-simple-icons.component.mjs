"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgxSimpleIconsComponent = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@angular/core");
const icon_provider_1 = require("../icon.provider");
const i0 = tslib_1.__importStar(require("@angular/core"));
const i1 = tslib_1.__importStar(require("../icon.provider"));
class NgxSimpleIconsComponent {
    constructor(elem, changeDetector, iconProvider) {
        this.elem = elem;
        this.changeDetector = changeDetector;
        this.iconProvider = iconProvider;
        this.width = 24;
        this.height = 24;
    }
    /**
     * OnChanges event.
     *
     * @param changes SimpleChanges
     */
    ngOnChanges(changes) {
        // icons are provided as an array of objects because of "multi: true"
        const icons = Object.assign({}, ...this.iconProvider);
        let svg = `${icons[(changes['icon'].currentValue)]}` || '';
        if (svg === 'undefined') {
            console.error(`icon '${this.icon}' is not provided in module. Use pick() method to add icon.`);
            return;
        }
        svg = svg.replace('svg', `svg width=${this.width}px height=${this.height}px`);
        this.elem.nativeElement.innerHTML = svg;
        this.changeDetector.markForCheck();
    }
}
exports.NgxSimpleIconsComponent = NgxSimpleIconsComponent;
NgxSimpleIconsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgxSimpleIconsComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: icon_provider_1.IconsProvider }], target: i0.ɵɵFactoryTarget.Component });
NgxSimpleIconsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.5", type: NgxSimpleIconsComponent, selector: "si, *[si]", inputs: { icon: "icon", width: "width", height: "height" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgxSimpleIconsComponent, decorators: [{
            type: core_1.Component,
            args: [{
                    selector: 'si, *[si]',
                    template: '<ng-content></ng-content>',
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.IconsProvider, decorators: [{
                    type: core_1.Inject,
                    args: [icon_provider_1.IconsProvider]
                }] }]; }, propDecorators: { icon: [{
                type: core_1.Input
            }], width: [{
                type: core_1.Input
            }], height: [{
                type: core_1.Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNpbXBsZS1pY29ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9uZ3gtc2ltcGxlLWljb25zL3NyYy9saWIvY29tcG9uZW50cy9uZ3gtc2ltcGxlLWljb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0NBU3VCO0FBRXZCLG9EQUFpRDs7O0FBR2pELE1BS2EsdUJBQXVCO0lBV2xDLFlBQ1UsSUFBZ0IsRUFDUCxjQUFpQyxFQUNWLFlBQTJCO1FBRjNELFNBQUksR0FBSixJQUFJLENBQVk7UUFDUCxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFDVixpQkFBWSxHQUFaLFlBQVksQ0FBZTtRQVI5RCxVQUFLLEdBQVcsRUFBRSxDQUFDO1FBR25CLFdBQU0sR0FBVyxFQUFFLENBQUM7SUFPM0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxXQUFXLENBQUMsT0FBc0I7UUFDdkMscUVBQXFFO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUksSUFBSSxDQUFDLFlBQWdDLENBQUMsQ0FBQztRQUMzRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO1FBRTNELElBQUksR0FBRyxLQUFLLFdBQVcsRUFBRTtZQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksNkRBQTZELENBQUMsQ0FBQztZQUMvRixPQUFPO1NBQ1I7UUFFRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsYUFBYSxJQUFJLENBQUMsS0FBSyxhQUFhLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFBO1FBRTdFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDeEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNyQyxDQUFDOztBQTFDSCwwREEyQ0M7b0hBdENZLHVCQUF1Qiw2RUFjeEIsNkJBQWE7d0dBZFosdUJBQXVCLGtJQUh4QiwyQkFBMkI7MkZBRzFCLHVCQUF1QjtrQkFMbkMsZ0JBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLGVBQWUsRUFBRSw4QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7MEJBZUksYUFBTTsyQkFBQyw2QkFBYTs0Q0FYaEIsSUFBSTtzQkFEVixZQUFLO2dCQUlDLEtBQUs7c0JBRFgsWUFBSztnQkFJQyxNQUFNO3NCQURaLFlBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWNvbk5hbWVFbnVtIH0gZnJvbSAnLi4vZW51bSc7XG5pbXBvcnQgeyBJY29uc1Byb3ZpZGVyIH0gZnJvbSBcIi4uL2ljb24ucHJvdmlkZXJcIjtcbmltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzaSwgKltzaV0nLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTmd4U2ltcGxlSWNvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKiogSWNvbiBuYW1lLiAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgaWNvbiE6IEljb25OYW1lRW51bSB8IEljb25OYW1lO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyB3aWR0aDogbnVtYmVyID0gMjQ7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGhlaWdodDogbnVtYmVyID0gMjQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIEBJbmplY3QoSWNvbnNQcm92aWRlcikgcHJpdmF0ZSByZWFkb25seSBpY29uUHJvdmlkZXI6IEljb25zUHJvdmlkZXIsXG4gICkge1xuICB9XG5cbiAgLyoqXG4gICAqIE9uQ2hhbmdlcyBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIGNoYW5nZXMgU2ltcGxlQ2hhbmdlc1xuICAgKi9cbiAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICAvLyBpY29ucyBhcmUgcHJvdmlkZWQgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBiZWNhdXNlIG9mIFwibXVsdGk6IHRydWVcIlxuICAgIGNvbnN0IGljb25zID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uKHRoaXMuaWNvblByb3ZpZGVyIGFzIGFueSBhcyBvYmplY3RbXSkpO1xuICAgIGxldCBzdmcgPSBgJHtpY29uc1soY2hhbmdlc1snaWNvbiddLmN1cnJlbnRWYWx1ZSldfWAgfHwgJyc7XG5cbiAgICBpZiAoc3ZnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihgaWNvbiAnJHt0aGlzLmljb259JyBpcyBub3QgcHJvdmlkZWQgaW4gbW9kdWxlLiBVc2UgcGljaygpIG1ldGhvZCB0byBhZGQgaWNvbi5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdmcgPSBzdmcucmVwbGFjZSgnc3ZnJywgYHN2ZyB3aWR0aD0ke3RoaXMud2lkdGh9cHggaGVpZ2h0PSR7dGhpcy5oZWlnaHR9cHhgKVxuXG4gICAgdGhpcy5lbGVtLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gc3ZnO1xuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cblxuIl19